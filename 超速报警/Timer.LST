C51 COMPILER V9.00   TIMER                                                                 05/26/2016 17:37:51 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN Timer.OBJ
COMPILER INVOKED BY: E:\software\DevelopmentSoftware\InstallSrc\KeilC51\C51\BIN\C51.EXE Timer.c COMPACT BROWSE DEBUG OBJ
                    -ECTEXTEND

line level    source

   1          #include "stc15.h"
   2          //#include "Temperature.h"
   3          //#include "UART.h"
   4          //#include "DHT11.h"
   5          #include "Buzzer.h"
   6          //#include "UltraSound.h"
   7          #include "main.h"
   8          
   9          #define TFOSC 11059200L
  10          #define TIMS (65536-TFOSC/1000)  //1T模式
  11          
  12          unsigned int T0times0;          //定时器0中断次数0
  13          unsigned int T0times1;          //定时器0中断次数1
  14          unsigned int T0times2;      //定时器0中断次数2
  15          unsigned int T1times;           //定时器1中断次数
  16          unsigned int T3times;           //定时器3中断次数
  17          unsigned int T4times;           //定时器4中断次数
  18          unsigned int T3TimesValue;      //定时器3中断阈值
  19          
  20          //固定定时器Timer0
  21          void Timer0Init(void)           //1毫秒@11.0592MHz
  22          {
  23   1              AUXR |= 0x80;               //定时器0时钟1T模式
  24   1              TMOD &= 0xfc;                   //设置定时器0 16位自动重装载
  25   1              TL0 = TIMS;                             //设置定时初值
  26   1              TH0 = TIMS>>8;                  //设置定时初值
  27   1              PT0 = 0;                //Timer0低优先级
  28   1              TR0 = 1;                        //定时器0开始计时
  29   1              ET0 = 1;                //使能定时器0中断
  30   1              T0times0 = 0;
  31   1              T0times1 = 0;
  32   1      }
  33          
  34          void EnableTimer0()
  35          {
  36   1              TL0 = TIMS;                                                                     //设置定时初值
  37   1              TH0 = TIMS>>8;                                                  //设置定时初值
  38   1              TR0 = 1;                                                                //定时器0开始计时
  39   1              ET0 = 1;                                                        //使能定时器0中断
  40   1              T0times0 = 0;
  41   1              T0times1 = 0;
  42   1      }
  43          
  44          void DisableTimer0()
  45          {
  46   1              TR0 = 0;                        //定时器0停止计时
  47   1              ET0 = 0;                //关闭定时器0中断       
  48   1      }
  49          
  50          //Timer0中断函数
  51          void Timer0_ISR() interrupt 1                               
  52          {
  53   1          //EA = 0;
  54   1              if(T0times0<2000)                                                       //2s间隔 DHT11
C51 COMPILER V9.00   TIMER                                                                 05/26/2016 17:37:51 PAGE 2   

  55   1              {
  56   2                  T0times0++;
  57   2              }
  58   1              else
  59   1              {
  60   2                  T0times0=0;
  61   2                      DHT11ISREADY = 1;       
  62   2              }
  63   1      
  64   1              if(T0times1<500)                                                        //0.5s间隔 UltraSound
  65   1              {
  66   2                  T0times1++;
  67   2              }
  68   1              else
  69   1              {
  70   2                      T0times1=0;
  71   2                      ULTRAISREADY = 1;
  72   2              }
  73   1      
  74   1              if(T0times2<1000)                                                       //1s间隔 DS3231
  75   1              {
  76   2                  T0times2++;
  77   2              }
  78   1              else
  79   1              {
  80   2                  T0times2=0;
  81   2                      DS3231ISREADY = 1;
  82   2              }
  83   1              
  84   1              //EA = 1;
  85   1      }
  86          
  87          //计时定时器Timer1
  88          void Timer1Init(void)           //@11.0592MHz           340m/s  4m       340t=2x    x<=4m    t=x/170<=0.02352941s   65535*1/110
             -59200
  89          {                                                                                   //有溢出的可能性,需要添加中断次数变量T1Times
  90   1              AUXR |= 0x40;                                   //定时器1时钟1T模式
  91   1              TMOD &= 0xf3;                                                           //设置定时器1 16位自动重装载
  92   1              TR1 = 0;                                                                //定时器1停止计时
  93   1              ET1 = 0;                                                        //关闭定时器1中断
  94   1      }
  95          
  96          void EnableTimer1()
  97          {
  98   1              TL1 = 0;                                                                        //设置定时初值
  99   1              TH1 = 0>>8;                                                             //设置定时初值
 100   1              TR1 = 1;                                                                //定时器1开始计时
 101   1              ET1 = 1;                                                        //使能定时器1中断
 102   1              T1times = 0;
 103   1      }
 104          
 105          void DisableTimer1()
 106          {
 107   1              TR1 = 0;                        //定时器1停止计时
 108   1              ET1 = 0;                //关闭定时器1中断       
 109   1      }
 110          
 111          //Timer1中断函数
 112          void Timer1_ISR() interrupt 3                           //由于发送数据使用串口中断,尽量避免在别的中断里直接发数据
 113          {
 114   1          //EA = 0;
 115   1              if(T1times<1000)
C51 COMPILER V9.00   TIMER                                                                 05/26/2016 17:37:51 PAGE 3   

 116   1              {       
 117   2                      T1times++;
 118   2              }
 119   1              else
 120   1              {
 121   2                      T1times=0;
 122   2              }
 123   1              //EA = 1;
 124   1              if(T1times == 4)
 125   1              {
 126   2                      ;
 127   2                      //SendData('?');
 128   2              }
 129   1      }
 130          
 131          //可变定时器Timer3
 132          void Timer3Init(void)           //1毫秒@11.0592MHz
 133          {
 134   1              T4T3M &= 0xfb;              //定时器3内部系统时钟
 135   1              T4T3M |= 0x02;          //定时器3 1T模式
 136   1              T4T3M &= 0xf7;              //定时器3停止计时
 137   1              IE2 &= 0xdf;            //关闭定时器3中断
 138   1      }
 139          
 140          void EnableTimer3()
 141          {
 142   1              T4T3M |= 0x08;              //定时器3开始计时
 143   1              IE2 |= 0x20;            //开启定时器3中断
 144   1              T3L = TIMS;                             //设置定时初值
 145   1              T3H = TIMS>>8;                  //设置定时初值
 146   1              T3times = 0;
 147   1              T3TimesValue = 400;
 148   1      }
 149          
 150          void DisableTimer3()
 151          {
 152   1              T4T3M &= 0xf7;              //定时器3停止计时
 153   1              IE2 &= 0xdf;            //关闭定时器3中断       
 154   1      }
 155          
 156          //Timer3中断函数
 157          void Timer3_ISR() interrupt 19                          //由于发送数据使用串口中断,尽量避免在别的中断里直接发数据
 158          {
 159   1          EA = 0;
 160   1              if(T3times<T3TimesValue)
 161   1              {       
 162   2                  Buzzer();                                                           //蜂鸣器
 163   2                      T3times++;
 164   2              }
 165   1              else
 166   1              {
 167   2                  P55 = 0;
 168   2                  FASTSPEED = 0;                                              
 169   2                  BUZZERTIMER3STOP = 1;
 170   2                      T3times=0;
 171   2              }
 172   1              EA = 1;
 173   1      }
 174          
 175          //可变定时器Timer4
 176          void Timer4Init(void)           //1毫秒@11.0592MHz
 177          {
C51 COMPILER V9.00   TIMER                                                                 05/26/2016 17:37:51 PAGE 4   

 178   1              T4T3M &= 0xbf;              //定时器4内部系统时钟
 179   1              T4T3M |= 0x20;          //定时器4 1T模式
 180   1              T4L = TIMS;                             //设置定时初值
 181   1              T4H = TIMS>>8;                  //设置定时初值
 182   1              T4T3M &= 0x7f;              //定时器4停止计时
 183   1              IE2 &= 0xbf;            //关闭定时器4中断
 184   1      }
 185          
 186          void EnableTimer4()
 187          {
 188   1              T4T3M |= 0x80;              //定时器4开始计时
 189   1              IE2 |= 0x40;            //开启定时器4中断
 190   1              T4times = 0;
 191   1      }
 192          
 193          void DisableTimer4()
 194          {
 195   1              T4T3M &= 0x7f;              //定时器4停止计时
 196   1              IE2 &= 0xbf;            //关闭定时器4中断       
 197   1      }
 198          
 199          //Timer4中断函数
 200          void Timer4_ISR() interrupt 20                          //由于发送数据使用串口中断,尽量避免在别的中断里直接发数据
 201          {
 202   1          //EA = 0;
 203   1              if(T4times<1000)
 204   1              {       
 205   2                      T4times++;
 206   2              }
 207   1              else
 208   1              {
 209   2                      T4times=0;
 210   2                      //SendString("ABCDE");
 211   2                      //ReadTemperature();                    //读取温度湿度传感器值
 212   2                      //ReadAir();                            //读取空气传感器值
 213   2                      //WifiSend();                           //Wifi发送数据
 214   2              }
 215   1              //EA = 1;
 216   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    491    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     14    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
